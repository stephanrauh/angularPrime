=== Download


=== Dependencies

As AngularPrime is the integration of the PrimeUI widgets in an AngularJS environment, both frameworks are required in order to use the AngularPrime components in your browser.

FurtherMore, PrimeUI is dependent on JQuery and JQuery-ui, so this means that following JavaScript libraries must be included on your page. +
After the library, the version(s) are indicated which are known to be compatible.  However, it is possible that other versions have no issues but this is not verified at this moment.

- AngularJS (1.0.4, 1.0.5, 1.0.6, 1.0.7, 1.1.3, 1.1.4, 1.1.5)
- PrimeUI (0.9.5)
- JQuery (1.9.2)
- JQuery-ui (1.9.2)

=== Configuration

The code of AngularPrime is combined wit the one of PrimeUI. So adding the required script file, together with the other dependencies (AngularJS, JQuery and JQuery-UI) is enough to have all the required code in the browser.

AngularPrime is defined as an AngularJS module, that can be indicated as dependency in the AngularJs application.

For The AngularJS terminology look at http:\\angularjs.org

The third part of the configuration is the addition of the structural CSS file.  This defines the layout of the components and is always required to have a proper function????  of the AngularPrime library.

Of Course, since the PrimeUI and thus also AngularPrime libraries are designed round the ThemeRoller functionality, The CSS file of your favorite theme needs to be included.


=== Hello World

[source,xml,numbered]
.index.html
----
<!DOCTYPE html>
<html>
<head>
    <title>AngularPrime - Hello World</title>
    <link rel="stylesheet" href="theme/theme.css">
    <link rel="stylesheet" href="css/puiGrowl.css">
    <link rel="stylesheet" href="css/puiInput.css">
    <link rel="stylesheet" href="css/puiPanel.css">
    <link rel="stylesheet" href="css/jquery-ui.css" />
    <script src="js/libs/primeUI/jquery.js"></script>
    <script src="js/libs/primeUI/jquery-ui.js"></script>
    <script src="js/libs/angular/angular.js"></script>
    <script src="js/libs/core.js"></script>
    <script src="js/libs/puiPanel.js"></script>
    <script src="js/libs/puiInput.js"></script>
    <script src="js/libs/puiGrowl.js"></script>
    <script src="js/app.js"></script>
    <script src="js/controller.js"></script>
</head>
<body ng-app="helloWorld">
<h1>AngularPrime Hello world example</h1>
<div id="page">
    <div class="ng-cloak" ng-controller="HelloController" ng-cloak >
        <div pui-panel="{'collapsed': false}" title="Example">
            Name : <input ng-model="name" pui-input /><br/>
            <button ng-click="greet()">Greet</button>
        </div>
    </div>
</div>
</body>
</html>
----

_Line 14-15_ : JQuery and JQuery-ui as a dependency of AngularPrime. +
_line 17_ : AngularJS as the JavaScript framework. +
_line 19-22_ : JavaScript code for the 3 AngularPrime widgets (panel, input and growl). +

_line 12_ : JQuery-ui structural CSS definition. +
_line 8-10_ : CSS for the 3 AngularPrime widgets we use. +
_line 6_ : PrimeFaces (based on ThemeRoller) theme. +

_line 32_ : DIV defining the panel widget. AngularPrime attributes are pui-panel and title. +
_line 33_ : Styled input field by using AngularPrime attribute pui-input

[source,javascript]
.app.js
----
angular.module('helloWorld', ['angular.prime' ]);
----

The definition of the AngularJKS module name must correspond with the name defined in the ng-app directive in the
html file (see line 27). +
By specifying the 'angular.prime' module as dependency, we have all AngularPrime functionality (directives, services,
 etc ...) at our disposal.

[source,javascript]
.controller.js
----
angular.module('helloWorld').controller('HelloController', function ($scope, puiGrowl) {
    $scope.name = '';
    $scope.greet = function () {
        puiGrowl.showInfoMessage('Example', 'Hello '+$scope.name);
    }
});
----

Definition of the controller, name (HelloController) must match with the name specified in the ng-controller
directive (see line 31). We also inject the puiGrowl service as a dependency.  And we use it to show the message in a
 growl widget when the greet function is executed.  In our case when the user clicks on the 'Greet' button.